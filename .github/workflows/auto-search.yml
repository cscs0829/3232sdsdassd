name: 자동 검색 실행

on:
  schedule:
    # 매 1시간마다 체크하여 설정된 interval_hours에 따라 실행
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      schedule_id:
        description: '실행할 스케줄 ID (선택사항)'
        required: false
        type: string
      api_key_profile_id:
        description: '사용할 API 키 프로필 ID (선택사항)'
        required: false
        type: string

jobs:
  auto-search:
    runs-on: ubuntu-latest
    
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci

      - name: 활성화된 설정 조회 및 실행 시간 확인
        id: get-configs
        run: |
          # 모든 활성화된 설정 조회 (interval_hours 포함)
          CONFIGS_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "apikey: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            "${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}/rest/v1/auto_search_configs?is_active=eq.true&select=id,interval_hours,last_run_at" \
            | jq -r '.')
          
          echo "설정 조회 결과: $CONFIGS_JSON"
          
          # 실행할 설정들 필터링
          EXECUTE_CONFIGS=""
          
          # 현재 시간 (UTC)
          CURRENT_TIME=$(date -u +%s)
          echo "현재 시간 (UTC): $(date -u)"
          
          # 각 설정별로 실행 시간 확인
          echo "$CONFIGS_JSON" | jq -r '.[] | @base64' | while read -r config; do
            CONFIG_DATA=$(echo "$config" | base64 -d)
            CONFIG_ID=$(echo "$CONFIG_DATA" | jq -r '.id')
            INTERVAL_HOURS=$(echo "$CONFIG_DATA" | jq -r '.interval_hours')
            LAST_RUN_AT=$(echo "$CONFIG_DATA" | jq -r '.last_run_at')
            
            echo "설정 $CONFIG_ID: interval_hours=$INTERVAL_HOURS, last_run_at=$LAST_RUN_AT"
            
            # 마지막 실행 시간이 없거나 설정된 간격이 지났으면 실행
            if [ "$LAST_RUN_AT" = "null" ] || [ -z "$LAST_RUN_AT" ]; then
              echo "설정 $CONFIG_ID: 첫 실행"
              EXECUTE_CONFIGS="$EXECUTE_CONFIGS $CONFIG_ID"
            else
              # 마지막 실행 시간을 초로 변환
              LAST_RUN_TIME=$(date -d "$LAST_RUN_AT" -u +%s 2>/dev/null || echo "0")
              # interval_hours를 초로 변환
              INTERVAL_SECONDS=$((INTERVAL_HOURS * 3600))
              TIME_DIFF=$((CURRENT_TIME - LAST_RUN_TIME))
              
              echo "설정 $CONFIG_ID: 마지막 실행 후 $TIME_DIFF초 경과, 필요 간격: $INTERVAL_SECONDS초"
              
              if [ $TIME_DIFF -ge $INTERVAL_SECONDS ]; then
                echo "설정 $CONFIG_ID: 실행 시간 도달"
                EXECUTE_CONFIGS="$EXECUTE_CONFIGS $CONFIG_ID"
              else
                echo "설정 $CONFIG_ID: 아직 실행 시간이 아님"
              fi
            fi
          done
          
          # 실행할 설정이 있으면 실행
          if [ -n "$EXECUTE_CONFIGS" ]; then
            echo "configs=$EXECUTE_CONFIGS" >> $GITHUB_OUTPUT
            echo "실행할 설정: $EXECUTE_CONFIGS"
          else
            echo "configs=" >> $GITHUB_OUTPUT
            echo "실행할 설정이 없습니다."
          fi

      - name: 자동 검색 실행
        if: steps.get-configs.outputs.configs != ''
        run: |
          # 환경변수 설정
          export SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}"
          export SUPABASE_SERVICE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
          
          # 실행할 설정 ID들을 배열로 변환
          CONFIGS="${{ steps.get-configs.outputs.configs }}"
          echo "실행할 설정들: $CONFIGS"
          
          # 각 설정별로 자동 검색 실행
          for config_id in $CONFIGS; do
            if [ -n "$config_id" ]; then
              echo "설정 $config_id 실행 중..."
              node scripts/auto-search.js $config_id
            fi
          done

      - name: 실행 결과 요약
        if: always()
        run: |
          echo "자동 검색 실행이 완료되었습니다."
          echo "실행된 설정: ${{ steps.get-configs.outputs.configs }}"